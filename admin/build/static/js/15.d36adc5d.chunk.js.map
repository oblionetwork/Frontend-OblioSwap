{"version":3,"sources":["views/pages/farming pairs/AddFarmingPair.js","views/pages/Addresses/Address.js"],"names":["Web3","require","apiURL","helper","stakeURL","AddFarmingPair","useForm","mode","register","handleSubmit","errors","reset","watch","useState","fromTokenSymbol","setFromTokenSymbol","fromTokenImg","setFromTokenImg","toTokenSymbol","setToTokenSymbol","toTokenImg","setToTokenImg","APR","setAPR","pairInfo","setPairInfo","pairAddress","setPairAddress","pairId","setPairId","allocationPoint","setAllocationPoint","address","setAddress","active","setActive","color","dispatch","useDispatch","override","css","useEffect","a","Promise","resolve","reject","window","ethereum","eth","Contract","collar_stake_ABI","collar_address","methods","currentPool","call","then","catch","err","connectMetaMask","web3","enable","getAccounts","accounts","admin_address","getBalance","console","error","message","toast","on","apiCall","StakePostData","pair","stakeStatus","postData","res","data","status","success","onSubmit","enableLoader","loaderText","apr","Math","pow","poolCreation","toString","send","from","hash","className","spinner","size","text","placeholder","autoComplete","onChange","event","target","value","name","ref","required","pattern","fromtokensym","type","fromtokenimg","totokensym","totokenimg","aprfee","pairinfo","pairaddress","readOnly","pairid","allocationpoint","align","style","background","border","router_address","liquidity_address"],"mappings":"6XAgBMA,EAAOC,EAAQ,KACfC,EAASC,IAAOC,WAmXPC,UAjXQ,WACrB,MAAyDC,YAAQ,CAC/DC,KAAM,WADAC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,OAAeC,GAA/C,EAAwCC,MAAxC,EAA+CD,OAG/C,EAA8CE,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAsBR,mBAAS,IAA/B,mBAAOS,EAAP,KAAYC,EAAZ,KACA,EAAgCV,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAsCZ,mBAAS,IAA/C,mBAAOa,EAAP,KAAoBC,EAApB,KACA,EAA4Bd,mBAAS,IAArC,mBAAOe,GAAP,KAAeC,GAAf,KACA,GAA8ChB,mBAAS,IAAvD,qBAAOiB,GAAP,MAAwBC,GAAxB,MACA,GAA8BlB,mBAAS,IAAvC,qBAAOmB,GAAP,MAAgBC,GAAhB,MACA,GAA4BpB,oBAAS,GAArC,qBAAOqB,GAAP,MAAeC,GAAf,MACA,GAAwBtB,mBAAS,WAAjC,qBAAKuB,GAAL,MACMC,IADN,MACiBC,eAEXC,GAAWC,cAAH,iHAQdC,oBAAS,sBAAC,sBAAAC,EAAA,sDACR,IAAIC,SAAQ,SAACC,EAASC,GAEU,IADnB,IAAI7C,EAAK8C,OAAOC,UACYC,IAAIC,UAASC,EAAkBC,KAEhDC,QAAQC,cAAcC,OAAOC,MAAK,SAACF,GACvDxB,GAAUwB,GACVT,EAAQS,MAEPG,OAAM,SAACC,UATJ,2CAcP,IAEHhB,oBAAS,sBAAC,sBAAAC,EAAA,sDACRgB,KADQ,2CAEP,CAAC1B,KAEJ,IAAM0B,GAAe,uCAAG,8BAAAhB,EAAA,yDACtBP,IAAU,GACqB,qBAApBW,OAAOC,SAFI,wBAGhBY,EAAO,IAAI3D,EAAK8C,OAAOC,UAHP,kBAKZD,OAAOC,SAASa,SALJ,uBAMKD,EAAKX,IAAIa,cANd,cAMZC,EANY,QAOL,KAAOC,MAClB9B,GAAW6B,EAAS,IACpB3B,IAAU,IATM,UAYIwB,EAAKX,IAAIgB,WAAWF,EAAS,IAZjC,gCAaE,IAAI9D,EAAK8C,OAAOC,UAblB,eAalBD,OAAOa,KAbW,0BAeX,GAfW,yCAiBlBM,QAAQC,MAAM,KAAEC,SAjBE,mBAkBX,GAlBW,gCAqBpBC,IAAMF,MAAM,2BArBQ,0DAAH,qDA2BNpB,OAAOC,SAASa,SAC/Bd,OAAOC,SAASsB,GAAG,mBAAmB,SAAUP,GAC9CJ,QAGF,IAAMY,GAAU,WACd,IAAIC,EAAgB,CAClBC,KAAM1D,EAAkB,IAAMI,EAC9BJ,gBAAiBA,EACjBE,aAAcA,EACdE,cAAeA,EACfE,WAAYA,EACZE,IAAKA,EACLE,SAAUA,EACVE,YAAaA,EACbE,OAAQA,GACRE,gBAAiBA,GACjB2C,YAAa,QAEftE,IACGuE,SAASxE,EAAS,YAAaqE,GAC/BhB,MAAK,SAACoB,GACkB,KAAnBA,EAAIC,KAAKC,QACXT,IAAMU,QAAQH,EAAIC,KAAKT,SACvBxD,KAEAyD,IAAMF,MAAMS,EAAIC,KAAKT,YAGxBX,OAAM,SAACC,GACNW,IAAMF,MAAMT,OAIZsB,GAAQ,uCAAG,8BAAArC,EAAA,6DACfL,GAAS2C,aAAa,IACtB3C,GAAS4C,YAAW,gBAChBC,EAAM5D,EAAM6D,KAAKC,IAAI,GAAI,IACzBzB,EAAO,IAAI3D,EAAK8C,OAAOC,UAJZ,SAKqB,IAAIY,EAAKX,IAAIC,SAC/CC,EACAC,KAPa,cAUOC,QAAQiC,aAAa3D,EAAawD,EAAII,YACzDC,KAAK,CAAEC,KAAMxD,KACbqC,GAAG,WAAW,SAACoB,GACdnB,QAEDD,GAAG,SAAS,SAACH,GACZ7B,GAAS2C,aAAa,IAEtBZ,IAAMF,MAAMA,MAlBD,2CAAH,qDAsBd,OACE,qBAAKwB,UAAU,wBAAf,SACE,eAAC,IAAD,CACExD,OAAQA,GACRyD,QAAS,cAAC,IAAD,CAAYvD,MAAOA,GAAOI,IAAKD,GAAUqD,KAAM,MACxDC,KAAK,kCAHP,UAKE,qDACA,uBACA,sBAAMH,UAAU,aAAaX,SAAUtE,EAAasE,IAApD,SACE,sBAAKW,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,yDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEA,UAAU,eACVI,YAAY,oBACZC,aAAa,MACbC,SAAU,SAACC,GAAD,OAAWlF,EAAmBkF,EAAMC,OAAOC,QACrDC,KAAK,eACLC,IAAK7F,EAAS,CACZ8F,SAAU,gCACVC,QAAS,CACPJ,MAAO,iBACPhC,QAAS,uBAIdzD,EAAO8F,cACN,sBAAKd,UAAU,aAAf,UAA6BhF,EAAO8F,aAAarC,QAAjD,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,sDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLf,UAAU,eACVK,aAAa,MACbD,YAAY,oBACZM,KAAK,eACLJ,SAAU,SAACC,GAAD,OAAWhF,EAAgBgF,EAAMC,OAAOC,QAClDE,IAAK7F,EAAS,CACZ8F,SAAU,iCAGb5F,EAAOgG,cACN,sBAAKhB,UAAU,aAAf,UAA6BhF,EAAOgG,aAAavC,QAAjD,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,uDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEA,UAAU,eACVI,YAAY,kBACZC,aAAa,MACbC,SAAU,SAACC,GAAD,OAAW9E,EAAiB8E,EAAMC,OAAOC,QACnDC,KAAK,aACLC,IAAK7F,EAAS,CACZ8F,SAAU,8BACVC,QAAS,CACPJ,MAAO,iBACPhC,QAAS,uBAIdzD,EAAOiG,YACN,sBAAKjB,UAAU,aAAf,UAA6BhF,EAAOiG,WAAWxC,QAA/C,UAGJ,uBApEF,IAoEY,uBACV,qBAAKuB,UAAU,QAAf,SACE,oDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLf,UAAU,eACVI,YAAY,iBACZC,aAAa,MACbK,KAAK,aACLJ,SAAU,SAACC,GAAD,OAAW5E,EAAc4E,EAAMC,OAAOC,QAChDE,IAAK7F,EAAS,CACZ8F,SAAU,+BAGb5F,EAAOkG,YACN,sBAAKlB,UAAU,aAAf,UAA6BhF,EAAOkG,WAAWzC,QAA/C,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,+CAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLf,UAAU,eACVI,YAAY,UACZM,KAAK,SACLL,aAAa,MACbC,SAAU,SAACC,GAAD,OAAW1E,EAAO0E,EAAMC,OAAOC,QACzCE,IAAK7F,EAAS,CACZ8F,SAAU,sBACVC,QAAS,CACPJ,MAAO,6BACPhC,QAAS,qBAIdzD,EAAOmG,QACN,sBAAKnB,UAAU,aAAf,UAA6BhF,EAAOmG,OAAO1C,QAA3C,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,iDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLV,aAAa,MACbL,UAAU,eACVI,YAAY,gBACZM,KAAK,WACLJ,SAAU,SAACC,GAAD,OAAWxE,EAAYwE,EAAMC,OAAOC,QAC9CE,IAAK7F,EAAS,CACZ8F,SAAU,gCAGb5F,EAAOoG,UACN,sBAAKpB,UAAU,aAAf,UAA6BhF,EAAOoG,SAAS3C,QAA7C,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,oDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLV,aAAa,MACbL,UAAU,eACVI,YAAY,eACZM,KAAK,cACLJ,SAAU,SAACC,GAAD,OAAWtE,EAAesE,EAAMC,OAAOC,QACjDE,IAAK7F,EAAS,CACZ8F,SAAU,2BACVC,QAAS,CACPJ,MAAO,iBACPhC,QAAS,uBAIdzD,EAAOqG,aACN,sBAAKrB,UAAU,aAAf,UAA6BhF,EAAOqG,YAAY5C,QAAhD,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,+CAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLf,UAAU,eACVI,YAAY,UACZkB,UAAQ,EACRZ,KAAK,SACLD,MAAOvE,GACPoE,SAAU,SAACC,GAAD,OAAWpE,GAAUoE,EAAMC,OAAOC,QAC5CE,IAAK7F,EAAS,CACZ8F,SAAU,sBACVC,QAAS,CACPJ,MAAO,WACPhC,QAAS,qBAIdzD,EAAOuG,QACN,sBAAKvB,UAAU,aAAf,UAA6BhF,EAAOuG,OAAO9C,QAA3C,UAGJ,uBACA,uBACA,qBAAKuB,UAAU,QAAf,SACE,wDAEF,sBAAKA,UAAU,QAAf,UACE,uBACEe,KAAK,OACLV,aAAa,MACbL,UAAU,eACVI,YAAY,mBACZM,KAAK,kBACLJ,SAAU,SAACC,GAAD,OAAWlE,GAAmBkE,EAAMC,OAAOC,QACrDE,IAAK7F,EAAS,CACZ8F,SAAU,+BACVC,QAAS,CACPJ,MAAO,6BACPhC,QAAS,oBAIdzD,EAAOwG,iBACN,sBAAKxB,UAAU,aAAf,UACGhF,EAAOwG,gBAAgB/C,QAD1B,UAKJ,uBAEA,uBAtNF,UAsNkB,uBAChB,uBAEA,uBACA,qBAAKgD,MAAM,SAAX,SACE,wBAAQzB,UAAU,MAAM0B,MAAO,CAAEC,WAAY,UAAWjF,MAAO,QAASkF,OAAQ,qBAAhF,sBAEF,mC,svVC3XZ,wIAEO,IAAMvD,EAAgB,6CAEhBZ,EAAiB,6CAEjBoE,EAAiB,6CAEjBC,EAAoB,8C","file":"static/js/15.d36adc5d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport helper from \"src/helpers/axiosHelper\";\nimport { toast } from \"react-toastify\";\nimport \"./farmingPair.css\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport { css } from \"@emotion/react\";\nimport { collar_address, admin_address } from \"../Addresses/Address\";\nimport collar_stake_ABI from \"../../../Abi/collar_stake.json\"\nimport { enableLoader, loaderText } from \"../../../Actions/Actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nconst Web3 = require(\"web3\");\nconst apiURL = helper.stakeURL();\n\nconst AddFarmingPair = () => {\n  const { register, handleSubmit, errors, watch, reset } = useForm({\n    mode: \"onBlur\",\n  });\n  const [fromTokenSymbol, setFromTokenSymbol] = useState(\"\");\n  const [fromTokenImg, setFromTokenImg] = useState(\"\");\n  const [toTokenSymbol, setToTokenSymbol] = useState(\"\");\n  const [toTokenImg, setToTokenImg] = useState(\"\");\n  const [APR, setAPR] = useState(\"\");\n  const [pairInfo, setPairInfo] = useState(\"\");\n  const [pairAddress, setPairAddress] = useState(\"\");\n  const [pairId, setPairId] = useState(\"\");\n  const [allocationPoint, setAllocationPoint] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [active, setActive] = useState(false);\n  let [color, setColor] = useState(\"#0d6efd\");\n  const dispatch = useDispatch()\n\n  const override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n    z-index: 5;\n  `;\n\n\n  useEffect(async () => {\n    new Promise((resolve, reject) => {\n      var web3 = new Web3(window.ethereum);\n      const collar_stake_contract = new web3.eth.Contract(collar_stake_ABI, collar_address);\n\n      collar_stake_contract.methods.currentPool().call().then((currentPool) => {\n        setPairId(currentPool)\n        resolve(currentPool)\n      })\n        .catch((err) => {\n\n        })\n    })\n\n  }, [])\n\n  useEffect(async () => {\n    connectMetaMask();\n  }, [address]);\n\n  const connectMetaMask = async () => {\n    setActive(true);\n    if (typeof window.ethereum !== \"undefined\") {\n      var web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        if (accounts[0] === admin_address) {\n          setAddress(accounts[0]);\n          setActive(false);\n\n        }\n        const balance = await web3.eth.getBalance(accounts[0]);\n        window.web3 = await new Web3(window.ethereum);\n\n        return true;\n      } catch (e) {\n        console.error(e.message)\n        return false;\n      }\n    } else {\n      toast.error(\"Please Connect Metamask\");\n    }\n  }\n\n\n\n  var accounts = window.ethereum.enable();\n  window.ethereum.on('accountsChanged', function (accounts) {\n    connectMetaMask();\n  })\n\n  const apiCall = () => {\n    let StakePostData = {\n      pair: fromTokenSymbol + \"_\" + toTokenSymbol,\n      fromTokenSymbol: fromTokenSymbol,\n      fromTokenImg: fromTokenImg,\n      toTokenSymbol: toTokenSymbol,\n      toTokenImg: toTokenImg,\n      APR: APR,\n      pairInfo: pairInfo,\n      pairAddress: pairAddress,\n      pairId: pairId,\n      allocationPoint: allocationPoint,\n      stakeStatus: \"Live\"\n    };\n    helper\n      .postData(apiURL + \"/addstake\", StakePostData)\n      .then((res) => {\n        if (res.data.status == 200) {\n          toast.success(res.data.message);\n          reset();\n        } else {\n          toast.error(res.data.message);\n        }\n      })\n      .catch((err) => {\n        toast.error(err);\n      });\n  };\n\n  const onSubmit = async () => {\n    dispatch(enableLoader(true))\n    dispatch(loaderText(\"Loading....\"))\n    var apr = APR * Math.pow(10, 18)\n    var web3 = new Web3(window.ethereum);\n    const collar_stake_contract = await new web3.eth.Contract(\n      collar_stake_ABI,\n      collar_address\n    );\n\n    collar_stake_contract.methods.poolCreation(pairAddress, apr.toString())\n      .send({ from: address })\n      .on(\"receipt\", (hash) => {\n        apiCall();\n      })\n      .on(\"error\", (error) => {\n        dispatch(enableLoader(false))\n\n        toast.error(error);\n      });\n  };\n\n  return (\n    <div className=\"add-farming-container\">\n      <LoadingOverlay\n        active={active}\n        spinner={<FadeLoader color={color} css={override} size={150} />}\n        text=\"Please Connect Admin Address...\"\n      >\n        <h5>Add Farm LP Staking</h5>\n        <br></br>\n        <form className=\"form-class\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <label>From Token Symbol:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                className=\"form-control\"\n                placeholder=\"From Token Symbol\"\n                autoComplete=\"off\"\n                onChange={(event) => setFromTokenSymbol(event.target.value)}\n                name=\"fromtokensym\"\n                ref={register({\n                  required: \"From Token Symbol is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Characters\",\n                  },\n                })}\n              ></input>\n              {errors.fromtokensym && (\n                <div className=\"form-error\">{errors.fromtokensym.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>From Token Img:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                placeholder=\"From Token Image \"\n                name=\"fromtokenimg\"\n                onChange={(event) => setFromTokenImg(event.target.value)}\n                ref={register({\n                  required: \"From Token Img is required\",\n                })}\n              />\n              {errors.fromtokenimg && (\n                <div className=\"form-error\">{errors.fromtokenimg.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>To Token Symbol:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                className=\"form-control\"\n                placeholder=\"To Token Symbol\"\n                autoComplete=\"off\"\n                onChange={(event) => setToTokenSymbol(event.target.value)}\n                name=\"totokensym\"\n                ref={register({\n                  required: \"To Token Symbol is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Characters\",\n                  },\n                })}\n              ></input>\n              {errors.totokensym && (\n                <div className=\"form-error\">{errors.totokensym.message}.</div>\n              )}\n            </div>\n            <br></br> <br></br>\n            <div className=\"col-3\">\n              <label>To Token Img:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"To Token Image\"\n                autoComplete=\"off\"\n                name=\"totokenimg\"\n                onChange={(event) => setToTokenImg(event.target.value)}\n                ref={register({\n                  required: \"To Token Img is required\",\n                })}\n              />\n              {errors.totokenimg && (\n                <div className=\"form-error\">{errors.totokenimg.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>APR (%):</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"APR Fee\"\n                name=\"aprfee\"\n                autoComplete=\"off\"\n                onChange={(event) => setAPR(event.target.value)}\n                ref={register({\n                  required: \"APR Fee is required\",\n                  pattern: {\n                    value: /^\\d{0,3}(\\.(?=\\d)\\d){0,1}$/,\n                    message: \"Only Numerics\",\n                  },\n                })}\n              />\n              {errors.aprfee && (\n                <div className=\"form-error\">{errors.aprfee.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>Pair Info:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\"Pair Info URL\"\n                name=\"pairinfo\"\n                onChange={(event) => setPairInfo(event.target.value)}\n                ref={register({\n                  required: \"Pair Info URL is required\",\n                })}\n              />\n              {errors.pairinfo && (\n                <div className=\"form-error\">{errors.pairinfo.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>Pair Address:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\"Pair Address\"\n                name=\"pairaddress\"\n                onChange={(event) => setPairAddress(event.target.value)}\n                ref={register({\n                  required: \"Pair Address is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Characters\",\n                  },\n                })}\n              />\n              {errors.pairaddress && (\n                <div className=\"form-error\">{errors.pairaddress.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>Pair ID:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Pair ID\"\n                readOnly\n                name=\"pairid\"\n                value={pairId}\n                onChange={(event) => setPairId(event.target.value)}\n                ref={register({\n                  required: \"Pair ID is required\",\n                  pattern: {\n                    value: /^[0-9]*$/,\n                    message: \"Only Numerics\",\n                  },\n                })}\n              />\n              {errors.pairid && (\n                <div className=\"form-error\">{errors.pairid.message}.</div>\n              )}\n            </div>\n            <br></br>\n            <br></br>\n            <div className=\"col-3\">\n              <label>Allocation Point:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\"Allocation Point\"\n                name=\"allocationpoint\"\n                onChange={(event) => setAllocationPoint(event.target.value)}\n                ref={register({\n                  required: \"Allocation Point is required\",\n                  pattern: {\n                    value: /^\\d{0,3}(\\.(?=\\d)\\d){0,1}$/,\n                    message: \"Only Numbers\",\n                  },\n                })}\n              />\n              {errors.allocationpoint && (\n                <div className=\"form-error\">\n                  {errors.allocationpoint.message}.\n                </div>\n              )}\n            </div>\n            <br></br>\n\n            <br></br>       <br></br>\n            <br></br>\n\n            <br></br>\n            <div align=\"center\">\n              <button className=\"btn\" style={{ background: \"#680e9c\", color: \"white\", border: \"2px solid #994ac0\" }}>Submit</button>\n            </div>\n            <br></br>\n\n          </div>\n        </form>\n      </LoadingOverlay>\n    </div>\n  );\n};\n\nexport default AddFarmingPair;\n","// export const admin_address = \"0xae6F33E0fc0e5EE264AeF585c8435aef40565148\"\n\nexport const admin_address = \"0x66CAD4cB71902b77615Cb44C6e1526341acf0155\"\n\nexport const collar_address = \"0x1182E2f7Be2AA3a6b2d8fF80421551F4562e1158\";\n\nexport const router_address = \"0xF0ab3426F5A5F90D919abDB47C7ed91aCF8117f0\"\n\nexport const liquidity_address = \"0x2508016a2c33dD8D12e902bE3711A04378A3F9e2\""],"sourceRoot":""}