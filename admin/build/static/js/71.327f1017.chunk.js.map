{"version":3,"sources":["views/pages/ip whitelist/AddNewWhitelist.js"],"names":["helper","whiteURL","AddNewWhitelist","useForm","mode","register","handleSubmit","errors","reset","watch","useState","ipAddress","setIpAddress","onSubmit","ipAddData","postData","then","res","data","status","toast","success","message","error","catch","err","type","className","placeholder","onChange","event","target","value","ref","required","pattern","autoComplete","name","whitelistip","align","style","background","color","border"],"mappings":"qPAMeA,IAAOC,WA4DPC,UA1DS,WACtB,MAAyDC,YAAQ,CAC/DC,KAAM,WADAC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,OAAeC,GAA/C,EAAwCC,MAAxC,EAA+CD,OAG/C,EAAkCE,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAqBA,OACE,gCACE,yDACA,uBACA,uBAAMC,SAAUP,GAvBH,WACf,IAAIQ,EAAY,CACdH,UAAWA,GAEbX,IACGe,SAAS,iEAAkED,GAC3EE,MAAK,SAACC,GACkB,KAAnBA,EAAIC,KAAKC,QACXC,IAAMC,QAAQJ,EAAIC,KAAKI,SACvBd,KAEAY,IAAMG,MAAMN,EAAIC,KAAKI,YAGxBE,OAAM,SAACC,GACNL,IAAMG,MAAME,SAQd,UACE,uBACEC,KAAK,OACLC,UAAU,eACVC,YAAY,mBACZC,SAAU,SAACC,GAAD,OAAWlB,EAAakB,EAAMC,OAAOC,QAC/CC,IAAK5B,EAAS,CACZ6B,SAAU,yBACVC,QAAS,CACPH,MACE,wFACFV,QAAS,6BAGbc,aAAa,MACbC,KAAK,gBAEN9B,EAAO+B,aACN,sBAAKX,UAAU,aAAf,UAA6BpB,EAAO+B,YAAYhB,QAAhD,OAEF,uBACA,qBAAKiB,MAAM,SAAX,SACE,wBAAQZ,UAAU,MAAMa,MAAO,CAAEC,WAAY,UAAWC,MAAO,QAASC,OAAQ,qBAAhF","file":"static/js/71.327f1017.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useForm } from \"react-hook-form\";\nimport helper from \"src/helpers/axiosHelper\";\nimport { toast } from \"react-toastify\";\n\nconst apiURL = helper.whiteURL();\n\nconst AddNewWhitelist = () => {\n  const { register, handleSubmit, errors, watch, reset } = useForm({\n    mode: \"onBlur\",\n  });\n  const [ipAddress, setIpAddress] = useState();\n\n  const onSubmit = () => {\n    let ipAddData = {\n      ipAddress: ipAddress,\n    };\n    helper\n      .postData(\"https://bakxlxiqwosd.pocketswap.org/api/whitelist/addwhitelist\", ipAddData)\n      .then((res) => {\n        if (res.data.status == 200) {\n          toast.success(res.data.message);\n          reset();\n        } else {\n          toast.error(res.data.message);\n        }\n      })\n      .catch((err) => {\n        toast.error(err);\n      });\n  };\n\n  return (\n    <div>\n      <h5>Adding New Ip Whitelist</h5>\n      <br></br>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter IP Address\"\n          onChange={(event) => setIpAddress(event.target.value)}\n          ref={register({\n            required: \"IP address is required\",\n            pattern: {\n              value:\n                /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n              message: \"Should match IP pattern\",\n            },\n          })}\n          autoComplete=\"off\"\n          name=\"whitelistip\"\n        />\n        {errors.whitelistip && (\n          <div className=\"form-error\">{errors.whitelistip.message}.</div>\n        )}\n        <br></br>\n        <div align=\"center\">\n          <button className=\"btn\" style={{ background: \"#13316f\", color: \"white\", border: \"2px solid #13316f\" }}>Add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddNewWhitelist;\n"],"sourceRoot":""}