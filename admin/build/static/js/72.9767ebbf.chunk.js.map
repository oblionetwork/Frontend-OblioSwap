{"version":3,"sources":["views/pages/ip whitelist/Whitelist.js"],"names":["helper","whiteURL","Whitelist","history","useHistory","useState","WhitelistData","setWhiteListData","React","pending","setPending","data","whiteStatus","useSelector","state","userReducer","whitelist","columns","useDispatch","name","cell","row","index","selector","sortable","Date","createdAt","toLocaleString","className","onClick","clickHandler","_id","id","ID","useEffect","axios","get","then","res","result","catch","err","toast","error","ipPostData","postData","status","success","message","fil","filter","item","align","style","background","color","border","push","pagination","progressPending","highlightOnHover","fixedHeader","subHeaderAlign"],"mappings":"0TAYeA,IAAOC,WA+GPC,UA7GG,WAEhB,IAAIC,EAAUC,cAId,EAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA8BC,IAAMH,UAAS,GAA7C,mBAAOI,EAAP,KAAgBC,EAAhB,KACMC,EAAOL,EAGPM,EAAcC,aAClB,SAACC,GAAD,OAAWA,EAAMC,YAAYC,aAOzBC,GAJWC,cAID,CACd,CACEC,KAAM,OACNC,KAAM,SAACC,EAAKC,GAAN,OAAgBA,EAAQ,IAEhC,CACEH,KAAM,YACNI,SAAU,YACVC,UAAU,GAEZ,CACEL,KAAM,YACNI,SAAU,YACVC,UAAU,EACVJ,KAAM,SAACC,GAAD,OACJ,qBAAK,WAAS,iBAAd,SACG,IAAII,KAAKJ,EAAIK,WAAWC,qBAI/B,CACER,KAAM,SACNC,KAAM,SAACC,GAAD,OACJ,wBACEO,UAAU,yBACVC,QAAS,kBAAMC,EAAaT,EAAIU,MAChCC,GAAIX,EAAIY,GAHV,SAKE,cAAC,IAAD,UAMRC,qBAAU,WACRC,IACGC,IACD,mEAECC,MAAK,SAACC,GACL/B,EAAiB+B,EAAI3B,KAAK4B,QAC1B7B,GAAW,MAEZ8B,OAAM,SAACC,GAAD,OAASC,IAAMC,MAAMF,QAC7B,CAAC7B,IAEJ,IAAMkB,EAAe,SAACE,GACpB,IAAIY,EAAa,CACfZ,GAAIA,GAENhC,IACG6C,SAAS,6DAA8DD,GACvEP,MAAK,SAACC,GACL,GAAuB,KAAnBA,EAAI3B,KAAKmC,OAAe,CAC1BJ,IAAMK,QAAQT,EAAI3B,KAAKqC,SACvB,IAAIC,EAAM3C,EAAc4C,QAAQ,SAAAC,GAAI,OAAIA,EAAKpB,KAAOC,KACpDzB,EAAiB0C,QAEjBP,IAAMC,MAAML,EAAI3B,KAAKqC,YAGxBR,OAAM,SAACC,GACNC,IAAMC,MAAMF,OAGlB,OACE,gCACE,oDACA,qBAAKW,MAAM,QAAX,SACE,wBAAQxB,UAAU,MAAMyB,MAAO,CAAEC,WAAY,UAAWC,MAAO,QAASC,OAAQ,qBAAuB3B,QArFnF,WACxB1B,EAAQsD,KAAK,iDAoFT,uBAIF,uBACA,gCACG,IACD,cAAC,IAAD,CACE9C,KAAMA,EACNM,QAASA,EACTyC,YAAY,EACZC,gBAAiBlD,EACjBmD,kBAAkB,EAClBC,aAAa,EACbC,eAAe","file":"static/js/72.9767ebbf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DataTable, { createTheme } from \"react-data-table-component\";\nimport axios from \"axios\";\nimport { FiEdit } from \"react-icons/fi\";\nimport { RiDeleteBinLine } from \"react-icons/ri\";\nimport helper from \"src/helpers/axiosHelper\";\nimport { toast } from \"react-toastify\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { showWhiteListData } from \"../../../Actions/Actions\"\n\nconst apiURL = helper.whiteURL();\n\nconst Whitelist = () => {\n\n  let history = useHistory();\n  const AddNewIpWhitelist = () => {\n    history.push(\"/SXusr9IQvIL23HgiLxfPv2U3cyQwJeIo75GkMe9POxc\");\n  };\n  const [WhitelistData, setWhiteListData] = useState([]);\n  const [pending, setPending] = React.useState(true);\n  const data = WhitelistData;\n\n\n  const whiteStatus = useSelector(\n    (state) => state.userReducer.whitelist\n  );\n\n  const dispatch = useDispatch();\n  const showWList = (data) => dispatch(showWhiteListData(data));\n\n\n  const columns = [\n    {\n      name: \"S.No\",\n      cell: (row, index) => index + 1,\n    },\n    {\n      name: \"IpAddress\",\n      selector: \"ipAddress\",\n      sortable: true,\n    },\n    {\n      name: \"CreatedAt\",\n      selector: \"createdAt\",\n      sortable: true,\n      cell: (row) => (\n        <div data-tag=\"allowRowEvents\">\n          {new Date(row.createdAt).toLocaleString()}\n        </div>\n      ),\n    },\n    {\n      name: \"Action\",\n      cell: (row) => (\n        <button\n          className=\"btn btn-primary btn-sm\"\n          onClick={() => clickHandler(row._id)}\n          id={row.ID}\n        >\n          <RiDeleteBinLine />\n        </button>\n      ),\n    },\n  ];\n\n  useEffect(() => {\n    axios\n      .get(\n      \"https://bakxlxiqwosd.pocketswap.org/api/whitelist/listwhitelist\"\n      )\n      .then((res) => {\n        setWhiteListData(res.data.result);\n        setPending(false);\n      })\n      .catch((err) => toast.error(err));\n  }, [whiteStatus]);\n\n  const clickHandler = (id) => {\n    let ipPostData = {\n      id: id,\n    };\n    helper\n      .postData(\"https://bakxlxiqwosd.pocketswap.org/api/whitelist/deleteip\", ipPostData)\n      .then((res) => {\n        if (res.data.status == 200) {\n          toast.success(res.data.message);\n          var fil = WhitelistData.filter((item => item._id != id))\n          setWhiteListData(fil)\n        } else {\n          toast.error(res.data.message);\n        }\n      })\n      .catch((err) => {\n        toast.error(err);\n      });\n  };\n  return (\n    <div>\n      <h5> IP Whitelist Page</h5>\n      <div align=\"right\">\n        <button className=\"btn\" style={{ background: \"#13316f\", color: \"white\", border: \"2px solid #13316f\" }} onClick={AddNewIpWhitelist}>\n          Add New\n        </button>\n      </div>\n      <br></br>\n      <div>\n        {\" \"}\n        <DataTable\n          data={data}\n          columns={columns}\n          pagination={true}\n          progressPending={pending}\n          highlightOnHover={true}\n          fixedHeader={true}\n          subHeaderAlign=\"right\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Whitelist;\n"],"sourceRoot":""}