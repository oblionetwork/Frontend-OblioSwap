{"version":3,"sources":["views/pages/pool/addPool.js","views/pages/Addresses/Address.js"],"names":["Web3","require","helper","poolURL","AddPool","useForm","mode","register","handleSubmit","errors","watch","reset","useState","setFromTokenSymbol","setFromTokenImg","setAPR","setFromAddress","pairId","setPairId","setFromDecimal","setRewardToken","address","setAddress","setAllocationPoint","active","setActive","color","override","css","useEffect","a","connectMetaMask","window","ethereum","enable","on","accounts","web3","eth","getAccounts","admin_address","getBalance","toast","error","className","spinner","size","text","onSubmit","type","autoComplete","placeholder","name","onChange","event","target","value","ref","required","pattern","message","fromtokensymbol","fromtokenimage","aprfee","fromaddress","readOnly","pairid","fromdecimal","rewardtoken","allocpoint","align","style","background","border","collar_address","router_address","liquidity_address"],"mappings":"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","file":"static/js/17.de519171.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useForm } from \"react-hook-form\";\nimport helper from \"src/helpers/axiosHelper\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport { css } from \"@emotion/react\";\nimport { admin_address, smartChef } from \"../Addresses/Address\";\nconst Web3 = require(\"web3\");\n\nconst apiURL = helper.poolURL();\n\nconst AddPool = () => {\n  \n  const { register, handleSubmit, errors, watch, reset } = useForm({\n    mode: \"onBlur\",\n  });\n  const [fromTokenSymbol, setFromTokenSymbol] = useState(\"\");\n  const [fromTokenImg, setFromTokenImg] = useState(\"\");\n  const [APR, setAPR] = useState(\"\");\n  const [fromAddress, setFromAddress] = useState(\"\");\n  const [pairId, setPairId] = useState(\"\");\n  const [fromDecimal, setFromDecimal] = useState(\"\");\n  const [rewardToken, setRewardToken] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [allocationPoint, setAllocationPoint] = useState(\"\");\n  const [active, setActive] = useState(true);\n  let [color, setColor] = useState(\"#0d6efd\");\n\n  const override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n    z-index: 5;\n  `;\n\n  useEffect(async () => {\n    connectMetaMask();\n  }, [address]);\n\n\n\n  var accounts = window.ethereum.enable();\n  window.ethereum.on('accountsChanged', function (accounts) {\n    connectMetaMask();\n\n  })\n\n  const connectMetaMask = async () => {\n    setActive(true);\n\n    if (typeof window.ethereum !== \"undefined\") {\n      var web3 = new Web3(window.ethereum);\n\n      try {\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        if (accounts[0] === admin_address) {\n          setAddress(accounts[0]);\n          setActive(false);\n        }\n        const balance = await web3.eth.getBalance(accounts[0]);\n        window.web3 = await new Web3(window.ethereum);\n\n        return true;\n      } catch (e) {\n        // toast.error(e.message)\n      }\n    } else {\n      toast.error(\"Please Connect Metamask\");\n    }\n  }\n\n  const apiCall = () => {\n    let addPoolData = {\n      fromTokenSymbol: fromTokenSymbol,\n      fromTokenImg: fromTokenImg,\n      APR: APR,\n      fromAddress: fromAddress,\n      pairId: pairId,\n      fromDecimal: fromDecimal,\n      rewardToken: rewardToken,\n      allocationPoint: allocationPoint,\n    };\n\n    axios\n      .post(apiURL + \"/addpool\", addPoolData)\n      .then((res) => {\n        if (res.data.status == 200) {\n          toast.success(res.data.message);\n          reset();\n        } else {\n          toast.error(res.data.message);\n        }\n      })\n      .catch((err) => toast.error(err));\n  };\n  const onSubmit = () => {\n\n  };\n  return (\n    <div className=\"pool-container\">\n      <LoadingOverlay\n        active={active}\n        spinner={<FadeLoader color={color} css={override} size={150} />}\n        text=\"Please Connect Admin Address...\"\n      >\n        <form className=\"form-class\" onSubmit={handleSubmit(onSubmit)}>\n          <h5>Add Pool</h5>\n          <br></br>\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <label> Token Symbol:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\" Token Symbol\"\n                name=\"fromtokensymbol\"\n                onChange={(event) => {\n                  setFromTokenSymbol(event.target.value);\n                }}\n                ref={register({\n                  required: \" Token Symbol is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Characters\",\n                  },\n                })}\n              />\n              {errors.fromtokensymbol && (\n                <div className=\"form-error\">\n                  {errors.fromtokensymbol.message}.\n                </div>\n              )}\n            </div>\n          </div>\n          <br></br>\n\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <label> Token Image:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\" Token Image\"\n                name=\"fromtokenimage\"\n                onChange={(event) => setFromTokenImg(event.target.value)}\n                ref={register({\n                  required: \" Token Image is required\",\n                })}\n              />\n              {errors.fromtokenimage && (\n                <div className=\"form-error\">\n                  {errors.fromtokenimage.message}.\n                </div>\n              )}\n            </div>\n\n            <br></br>\n            <br></br>\n            <br></br>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-3\">APR (%)</div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"APR Fee\"\n                name=\"aprfee\"\n                autoComplete=\"off\"\n                onChange={(event) => setAPR(event.target.value)}\n                ref={register({\n                  required: \"APR Fee is required\",\n                  pattern: {\n                    value: /^\\d{0,3}(\\.(?=\\d)\\d){0,1}$/,\n                    message: \"Only Numerics\",\n                  },\n                })}\n              />\n              {errors.aprfee && (\n                <div className=\"form-error\">{errors.aprfee.message}.</div>\n              )}\n            </div>\n          </div>\n          <br></br>\n          <div className=\"row\">\n            <div className=\"col-3\"> Token Address:</div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                placeholder=\" Address\"\n                onChange={(event) => setFromAddress(event.target.value)}\n                name=\"fromaddress\"\n                ref={register({\n                  required: \"Token Address is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Characters\",\n                  },\n                })}\n              />\n              {errors.fromaddress && (\n                <div className=\"form-error\">{errors.fromaddress.message}.</div>\n              )}\n            </div>\n          </div>\n          <br></br>\n\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <label>Pair Id:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                value={pairId}\n                readOnly\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\"Pair ID\"\n                onChange={(event) => setPairId(event.target.value)}\n                name=\"pairid\"\n                ref={register({\n                  required: \"Pair Id is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Characters\",\n                  },\n                })}\n              />\n              {errors.pairid && (\n                <div className=\"form-error\">{errors.pairid.message}.</div>\n              )}\n            </div>\n          </div>\n          <br></br>\n\n          <div className=\"row\">\n            <div className=\"col-3\">Token Decimal:</div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                placeholder=\" Decimal\"\n                name=\"fromdecimal\"\n                onChange={(event) => setFromDecimal(event.target.value)}\n                ref={register({\n                  required: \" Token Decimal is required\",\n                  pattern: {\n                    value: /^[0-9]*$/,\n                    message: \"Only Numerics\",\n                  },\n                })}\n              />\n              {errors.fromdecimal && (\n                <div className=\"form-error\">{errors.fromdecimal.message}.</div>\n              )}\n            </div>\n          </div>\n          <br></br>\n\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <label>Reward Token:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                placeholder=\"Reward Token\"\n                onChange={(event) => setRewardToken(event.target.value)}\n                name=\"rewardtoken\"\n                ref={register({\n                  required: \"Reward Token is required\",\n                  pattern: {\n                    value: /^[A-Za-z0-9]*$/,\n                    message: \"Only Numerics\",\n                  },\n                })}\n              />\n              {errors.rewardtoken && (\n                <div className=\"form-error\">{errors.rewardtoken.message}.</div>\n              )}\n            </div>\n          </div>\n          <br></br>\n\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <label>Allocation Point:</label>\n            </div>\n            <div className=\"col-9\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                placeholder=\"Allocation Point\"\n                name=\"allocpoint\"\n                onChange={(event) => setAllocationPoint(event.target.value)}\n                ref={register({\n                  required: \"Allocation Point required\",\n                  pattern: {\n                    value: /^[0-9]*$/,\n                    message: \"Only Numerics\",\n                  },\n                })}\n              />\n              {errors.allocpoint && (\n                <div className=\"form-error\">{errors.allocpoint.message}.</div>\n              )}\n            </div>\n          </div>\n          <br></br>\n          <div align=\"center\">\n            <button className=\"btn\" style={{ background: \"#680e9c\", color: \"white\", border: \"2px solid #994ac0\" }} type=\"submit\">\n              Submit\n            </button>\n          </div>\n        </form>\n      </LoadingOverlay>\n    </div>\n  );\n};\n\nexport default AddPool;\n","// export const admin_address = \"0xae6F33E0fc0e5EE264AeF585c8435aef40565148\"\n\nexport const admin_address = \"0x66CAD4cB71902b77615Cb44C6e1526341acf0155\"\n\nexport const collar_address = \"0x1182E2f7Be2AA3a6b2d8fF80421551F4562e1158\";\n\nexport const router_address = \"0xF0ab3426F5A5F90D919abDB47C7ed91aCF8117f0\"\n\nexport const liquidity_address = \"0x2508016a2c33dD8D12e902bE3711A04378A3F9e2\""],"sourceRoot":""}